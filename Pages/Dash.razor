@using Microsoft.AspNetCore.Mvc
@using Microsoft.AspNetCore.Identity
@inject AuthenticationStateProvider _authenticationStateProvider
@using Microsoft.AspNetCore.Identity
@inject UserManager<IdentityUser> _userManager
@inject SignInManager<IdentityUser> _signInManager
@using CS4125.Controllers
@using CS4125.Data.UserData
@using CS4125.Data.System
@* @inject SystemController systemController *@
<div>
    <div class="header">
        <h1>Overview</h1>
        Welcome to Farm Ledger.
        <div class="account">
            <div>@_message</div>
            <img class="profile-logo" src="profile-icon.png" alt="profile logo" />
            <form id="logoutForm" method="post" action="Identity/Account/LogOut?returnUrl=%2F">
                <input name="__RequestVerificationToken" type="hidden" value="">
                <button type="submit" form="logoutForm" class="nav-link btn btn-link" style="width: 100%;">
                    Logout
                </button>
            </form>
        </div>
    </div>
    <div class="card-holder">
        <div class="card">
            <div class="card-title">Sites</div>
            <div class="card-content">@_siteCount</div>
        </div>
        <div class="card">
            <div class="card-title">Animals</div>
            <div class="card-content">@_animalCount</div>
        </div>
        <div class="card">
            <div class="card-title">Remaining Site Capacity</div>
            <div class="card-content">@_siteCapacity</div>
        </div>
        <div class="card">
            <div class="card-title">Next Payment Due</div>
            <div class="card-content">1/10/22</div>
        </div>

    </div>
</div>

@code {
    //run LogUsername on load
    protected override async Task OnInitializedAsync()
    {
        await GetUser();
    }
    string _message = "User not authenticated!";
    System _system = SystemController.System;
    Farmer _farmer;

    int _siteCount = 404;
    int _animalCount = 404;
    int _siteCapacity = 404;

    private async Task GetUser()
    {
        var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var currentUser = await _userManager.GetUserAsync(user);
            if (currentUser == null)
            {
                _message = "User not found";
                return;
            }
            if (currentUser.Email != null) _message = (currentUser.Email);
            _farmer = (Farmer)FindUser(currentUser.Id);
            _siteCount = _farmer.GetSiteCount();
            _animalCount = _farmer.GetAnimalCount();
            _siteCapacity = _farmer.GetRemainingCapacity();


            Console.WriteLine($"{user.Identity.Name} is authenticated.{ currentUser.Id }");
            _farmer = (Farmer)_system.GetUser(currentUser.Id);
        }
        else
        {
            Console.WriteLine(_message);
        }
    }


    public User FindUser(string id)
    {
        var user = _system.GetUser(id);

        return user;
    }

}
